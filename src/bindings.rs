// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod golem {
  pub mod rpc {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[derive(Clone)]
      pub enum WitNode{
        RecordValue(wit_bindgen::rt::vec::Vec::<(wit_bindgen::rt::string::String,i32,)>),
        VariantValue((wit_bindgen::rt::string::String,i32,)),
        EnumValue(wit_bindgen::rt::string::String),
        FlagsValue(wit_bindgen::rt::vec::Vec::<bool>),
        TupleValue(wit_bindgen::rt::vec::Vec::<i32>),
        ListValue(wit_bindgen::rt::vec::Vec::<i32>),
        OptionValue(Option<i32>),
        ResultValue(Result<i32,i32>),
        PrimU8(u8),
        PrimU16(u16),
        PrimU32(u32),
        PrimU64(u64),
        PrimS8(i8),
        PrimS16(i16),
        PrimS32(i32),
        PrimS64(i64),
        PrimFloat32(f32),
        PrimFloat64(f64),
        PrimChar(char),
        PrimBool(bool),
        PrimString(wit_bindgen::rt::string::String),
      }
      impl ::core::fmt::Debug for WitNode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            WitNode::RecordValue(e) => {
              f.debug_tuple("WitNode::RecordValue").field(e).finish()
            }
            WitNode::VariantValue(e) => {
              f.debug_tuple("WitNode::VariantValue").field(e).finish()
            }
            WitNode::EnumValue(e) => {
              f.debug_tuple("WitNode::EnumValue").field(e).finish()
            }
            WitNode::FlagsValue(e) => {
              f.debug_tuple("WitNode::FlagsValue").field(e).finish()
            }
            WitNode::TupleValue(e) => {
              f.debug_tuple("WitNode::TupleValue").field(e).finish()
            }
            WitNode::ListValue(e) => {
              f.debug_tuple("WitNode::ListValue").field(e).finish()
            }
            WitNode::OptionValue(e) => {
              f.debug_tuple("WitNode::OptionValue").field(e).finish()
            }
            WitNode::ResultValue(e) => {
              f.debug_tuple("WitNode::ResultValue").field(e).finish()
            }
            WitNode::PrimU8(e) => {
              f.debug_tuple("WitNode::PrimU8").field(e).finish()
            }
            WitNode::PrimU16(e) => {
              f.debug_tuple("WitNode::PrimU16").field(e).finish()
            }
            WitNode::PrimU32(e) => {
              f.debug_tuple("WitNode::PrimU32").field(e).finish()
            }
            WitNode::PrimU64(e) => {
              f.debug_tuple("WitNode::PrimU64").field(e).finish()
            }
            WitNode::PrimS8(e) => {
              f.debug_tuple("WitNode::PrimS8").field(e).finish()
            }
            WitNode::PrimS16(e) => {
              f.debug_tuple("WitNode::PrimS16").field(e).finish()
            }
            WitNode::PrimS32(e) => {
              f.debug_tuple("WitNode::PrimS32").field(e).finish()
            }
            WitNode::PrimS64(e) => {
              f.debug_tuple("WitNode::PrimS64").field(e).finish()
            }
            WitNode::PrimFloat32(e) => {
              f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
            }
            WitNode::PrimFloat64(e) => {
              f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
            }
            WitNode::PrimChar(e) => {
              f.debug_tuple("WitNode::PrimChar").field(e).finish()
            }
            WitNode::PrimBool(e) => {
              f.debug_tuple("WitNode::PrimBool").field(e).finish()
            }
            WitNode::PrimString(e) => {
              f.debug_tuple("WitNode::PrimString").field(e).finish()
            }
          }
        }
      }
      #[derive(Clone)]
      pub struct WitValue {
        pub nodes: wit_bindgen::rt::vec::Vec::<WitNode>,
      }
      impl ::core::fmt::Debug for WitValue {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
        }
      }
      #[derive(Clone)]
      pub struct Uri {
        pub value: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Uri {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Uri").field("value", &self.value).finish()
        }
      }
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct WasmRpc{
        handle: wit_bindgen::rt::Resource<WasmRpc>,
      }
      
      impl WasmRpc{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for WasmRpc{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[resource-drop]wasm-rpc"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn new(location: &Uri,) -> Self{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let Uri{ value:value0, } = location;
            let vec1 = value0;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[constructor]wasm-rpc"]
              fn wit_import(_: i32, _: i32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
            let ret = wit_import(ptr1, len1);
            WasmRpc::from_handle(ret as u32)
          }
        }
      }
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn invoke_and_await_json(&self,function_name: &str,function_params: &[wit_bindgen::rt::string::String],) -> Result<wit_bindgen::rt::string::String,()>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = function_name;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let vec2 = function_params;
            let len2 = vec2.len() as i32;
            let layout2 = alloc::Layout::from_size_align_unchecked(vec2.len() * 8, 4);
            let result2 = if layout2.size() != 0
            {
              let ptr = alloc::alloc(layout2);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout2);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec2.into_iter().enumerate() {
              let base = result2 as i32 + (i as i32) * 8;
              {
                let vec1 = e;
                let ptr1 = vec1.as_ptr() as i32;
                let len1 = vec1.len() as i32;
                *((base + 4) as *mut i32) = len1;
                *((base + 0) as *mut i32) = ptr1;
              }
            }
            let ptr3 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[method]wasm-rpc.invoke-and-await-json"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0, len0, result2 as i32, len2, ptr3);
            let l4 = i32::from(*((ptr3 + 0) as *const u8));
            if layout2.size() != 0 {
              alloc::dealloc(result2, layout2);
            }
            match l4 {
              0 => {
                let e = {
                  let l5 = *((ptr3 + 4) as *const i32);
                  let l6 = *((ptr3 + 8) as *const i32);
                  let len7 = l6 as usize;
                  let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                  
                  wit_bindgen::rt::string_lift(bytes7)
                };
                Ok(e)
              }
              1 => {
                let e = ();
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn invoke_and_await(&self,function_name: &str,function_params: &[WitValue],) -> Result<WitValue,()>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let mut cleanup_list = Vec::new();
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = function_name;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let vec13 = function_params;
            let len13 = vec13.len() as i32;
            let layout13 = alloc::Layout::from_size_align_unchecked(vec13.len() * 8, 4);
            let result13 = if layout13.size() != 0
            {
              let ptr = alloc::alloc(layout13);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout13);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec13.into_iter().enumerate() {
              let base = result13 as i32 + (i as i32) * 8;
              {
                let WitValue{ nodes:nodes1, } = e;
                let vec12 = nodes1;
                let len12 = vec12.len() as i32;
                let layout12 = alloc::Layout::from_size_align_unchecked(vec12.len() * 24, 8);
                let result12 = if layout12.size() != 0
                {
                  let ptr = alloc::alloc(layout12);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout12);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec12.into_iter().enumerate() {
                  let base = result12 as i32 + (i as i32) * 24;
                  {
                    match e {
                      WitNode::RecordValue(e) => {
                        *((base + 0) as *mut u8) = (0i32) as u8;
                        let vec4 = e;
                        let len4 = vec4.len() as i32;
                        let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 12, 4);
                        let result4 = if layout4.size() != 0
                        {
                          let ptr = alloc::alloc(layout4);
                          if ptr.is_null()
                          {
                            alloc::handle_alloc_error(layout4);
                          }
                          ptr
                        }else {{
                          ::core::ptr::null_mut()
                        }};
                        for (i, e) in vec4.into_iter().enumerate() {
                          let base = result4 as i32 + (i as i32) * 12;
                          {
                            let (t2_0, t2_1, ) = e;
                            let vec3 = t2_0;
                            let ptr3 = vec3.as_ptr() as i32;
                            let len3 = vec3.len() as i32;
                            *((base + 4) as *mut i32) = len3;
                            *((base + 0) as *mut i32) = ptr3;
                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(t2_1);
                          }
                        }
                        *((base + 12) as *mut i32) = len4;
                        *((base + 8) as *mut i32) = result4 as i32;
                        cleanup_list.extend_from_slice(&[(result4, layout4),]);
                      },
                      WitNode::VariantValue(e) => {
                        *((base + 0) as *mut u8) = (1i32) as u8;
                        let (t5_0, t5_1, ) = e;
                        let vec6 = t5_0;
                        let ptr6 = vec6.as_ptr() as i32;
                        let len6 = vec6.len() as i32;
                        *((base + 12) as *mut i32) = len6;
                        *((base + 8) as *mut i32) = ptr6;
                        *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(t5_1);
                      },
                      WitNode::EnumValue(e) => {
                        *((base + 0) as *mut u8) = (2i32) as u8;
                        let vec7 = e;
                        let ptr7 = vec7.as_ptr() as i32;
                        let len7 = vec7.len() as i32;
                        *((base + 12) as *mut i32) = len7;
                        *((base + 8) as *mut i32) = ptr7;
                      },
                      WitNode::FlagsValue(e) => {
                        *((base + 0) as *mut u8) = (3i32) as u8;
                        let vec8 = e;
                        let len8 = vec8.len() as i32;
                        let layout8 = alloc::Layout::from_size_align_unchecked(vec8.len() * 1, 1);
                        let result8 = if layout8.size() != 0
                        {
                          let ptr = alloc::alloc(layout8);
                          if ptr.is_null()
                          {
                            alloc::handle_alloc_error(layout8);
                          }
                          ptr
                        }else {{
                          ::core::ptr::null_mut()
                        }};
                        for (i, e) in vec8.into_iter().enumerate() {
                          let base = result8 as i32 + (i as i32) * 1;
                          {
                            *((base + 0) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                          }
                        }
                        *((base + 12) as *mut i32) = len8;
                        *((base + 8) as *mut i32) = result8 as i32;
                        cleanup_list.extend_from_slice(&[(result8, layout8),]);
                      },
                      WitNode::TupleValue(e) => {
                        *((base + 0) as *mut u8) = (4i32) as u8;
                        let vec9 = e;
                        let ptr9 = vec9.as_ptr() as i32;
                        let len9 = vec9.len() as i32;
                        *((base + 12) as *mut i32) = len9;
                        *((base + 8) as *mut i32) = ptr9;
                      },
                      WitNode::ListValue(e) => {
                        *((base + 0) as *mut u8) = (5i32) as u8;
                        let vec10 = e;
                        let ptr10 = vec10.as_ptr() as i32;
                        let len10 = vec10.len() as i32;
                        *((base + 12) as *mut i32) = len10;
                        *((base + 8) as *mut i32) = ptr10;
                      },
                      WitNode::OptionValue(e) => {
                        *((base + 0) as *mut u8) = (6i32) as u8;
                        match e {
                          Some(e) => {
                            *((base + 8) as *mut u8) = (1i32) as u8;
                            *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                          },
                          None => {
                            {
                              *((base + 8) as *mut u8) = (0i32) as u8;
                            }
                          },
                        };},
                        WitNode::ResultValue(e) => {
                          *((base + 0) as *mut u8) = (7i32) as u8;
                          match e {
                            Ok(e) => { {
                              *((base + 8) as *mut u8) = (0i32) as u8;
                              *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                            } },
                            Err(e) => { {
                              *((base + 8) as *mut u8) = (1i32) as u8;
                              *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                            } },
                          };},
                          WitNode::PrimU8(e) => {
                            *((base + 0) as *mut u8) = (8i32) as u8;
                            *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                          },
                          WitNode::PrimU16(e) => {
                            *((base + 0) as *mut u8) = (9i32) as u8;
                            *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                          },
                          WitNode::PrimU32(e) => {
                            *((base + 0) as *mut u8) = (10i32) as u8;
                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                          },
                          WitNode::PrimU64(e) => {
                            *((base + 0) as *mut u8) = (11i32) as u8;
                            *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                          },
                          WitNode::PrimS8(e) => {
                            *((base + 0) as *mut u8) = (12i32) as u8;
                            *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                          },
                          WitNode::PrimS16(e) => {
                            *((base + 0) as *mut u8) = (13i32) as u8;
                            *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                          },
                          WitNode::PrimS32(e) => {
                            *((base + 0) as *mut u8) = (14i32) as u8;
                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                          },
                          WitNode::PrimS64(e) => {
                            *((base + 0) as *mut u8) = (15i32) as u8;
                            *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                          },
                          WitNode::PrimFloat32(e) => {
                            *((base + 0) as *mut u8) = (16i32) as u8;
                            *((base + 8) as *mut f32) = wit_bindgen::rt::as_f32(e);
                          },
                          WitNode::PrimFloat64(e) => {
                            *((base + 0) as *mut u8) = (17i32) as u8;
                            *((base + 8) as *mut f64) = wit_bindgen::rt::as_f64(e);
                          },
                          WitNode::PrimChar(e) => {
                            *((base + 0) as *mut u8) = (18i32) as u8;
                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                          },
                          WitNode::PrimBool(e) => {
                            *((base + 0) as *mut u8) = (19i32) as u8;
                            *((base + 8) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                          },
                          WitNode::PrimString(e) => {
                            *((base + 0) as *mut u8) = (20i32) as u8;
                            let vec11 = e;
                            let ptr11 = vec11.as_ptr() as i32;
                            let len11 = vec11.len() as i32;
                            *((base + 12) as *mut i32) = len11;
                            *((base + 8) as *mut i32) = ptr11;
                          },
                        }
                      }
                    }
                    *((base + 4) as *mut i32) = len12;
                    *((base + 0) as *mut i32) = result12 as i32;
                    cleanup_list.extend_from_slice(&[(result12, layout12),]);
                  }
                }
                let ptr14 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                extern "C" {
                  #[link_name = "[method]wasm-rpc.invoke-and-await"]
                  fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0, len0, result13 as i32, len13, ptr14);
                let l15 = i32::from(*((ptr14 + 0) as *const u8));
                if layout13.size() != 0 {
                  alloc::dealloc(result13, layout13);
                }
                for (ptr, layout) in cleanup_list {
                  
                  if layout.size() != 0 {
                    
                    alloc::dealloc(ptr, layout);
                    
                  }
                  
                }
                match l15 {
                  0 => {
                    let e = {
                      let l16 = *((ptr14 + 4) as *const i32);
                      let l17 = *((ptr14 + 8) as *const i32);
                      let base64 = l16;
                      let len64 = l17;
                      let mut result64 = Vec::with_capacity(len64 as usize);
                      for i in 0..len64 {
                        let base = base64 + i * 24;
                        let e64 = {
                          let l18 = i32::from(*((base + 0) as *const u8));
                          let v63 = match l18 {
                            0 => {
                              let e63 = {
                                let l19 = *((base + 8) as *const i32);
                                let l20 = *((base + 12) as *const i32);
                                let base25 = l19;
                                let len25 = l20;
                                let mut result25 = Vec::with_capacity(len25 as usize);
                                for i in 0..len25 {
                                  let base = base25 + i * 12;
                                  let e25 = {
                                    let l21 = *((base + 0) as *const i32);
                                    let l22 = *((base + 4) as *const i32);
                                    let len23 = l22 as usize;
                                    let bytes23 = Vec::from_raw_parts(l21 as *mut _, len23, len23);
                                    let l24 = *((base + 8) as *const i32);
                                    
                                    (wit_bindgen::rt::string_lift(bytes23), l24)
                                  };
                                  result25.push(e25);
                                }
                                wit_bindgen::rt::dealloc(base25, (len25 as usize) * 12, 4);
                                
                                result25
                              };
                              WitNode::RecordValue(e63)
                            }
                            1 => {
                              let e63 = {
                                let l26 = *((base + 8) as *const i32);
                                let l27 = *((base + 12) as *const i32);
                                let len28 = l27 as usize;
                                let bytes28 = Vec::from_raw_parts(l26 as *mut _, len28, len28);
                                let l29 = *((base + 16) as *const i32);
                                
                                (wit_bindgen::rt::string_lift(bytes28), l29)
                              };
                              WitNode::VariantValue(e63)
                            }
                            2 => {
                              let e63 = {
                                let l30 = *((base + 8) as *const i32);
                                let l31 = *((base + 12) as *const i32);
                                let len32 = l31 as usize;
                                let bytes32 = Vec::from_raw_parts(l30 as *mut _, len32, len32);
                                
                                wit_bindgen::rt::string_lift(bytes32)
                              };
                              WitNode::EnumValue(e63)
                            }
                            3 => {
                              let e63 = {
                                let l33 = *((base + 8) as *const i32);
                                let l34 = *((base + 12) as *const i32);
                                let base36 = l33;
                                let len36 = l34;
                                let mut result36 = Vec::with_capacity(len36 as usize);
                                for i in 0..len36 {
                                  let base = base36 + i * 1;
                                  let e36 = {
                                    let l35 = i32::from(*((base + 0) as *const u8));
                                    
                                    wit_bindgen::rt::bool_lift(l35 as u8)
                                  };
                                  result36.push(e36);
                                }
                                wit_bindgen::rt::dealloc(base36, (len36 as usize) * 1, 1);
                                
                                result36
                              };
                              WitNode::FlagsValue(e63)
                            }
                            4 => {
                              let e63 = {
                                let l37 = *((base + 8) as *const i32);
                                let l38 = *((base + 12) as *const i32);
                                let len39 = l38 as usize;
                                
                                Vec::from_raw_parts(l37 as *mut _, len39, len39)
                              };
                              WitNode::TupleValue(e63)
                            }
                            5 => {
                              let e63 = {
                                let l40 = *((base + 8) as *const i32);
                                let l41 = *((base + 12) as *const i32);
                                let len42 = l41 as usize;
                                
                                Vec::from_raw_parts(l40 as *mut _, len42, len42)
                              };
                              WitNode::ListValue(e63)
                            }
                            6 => {
                              let e63 = {
                                let l43 = i32::from(*((base + 8) as *const u8));
                                
                                match l43 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l44 = *((base + 12) as *const i32);
                                      
                                      l44
                                    };
                                    Some(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                }
                              };
                              WitNode::OptionValue(e63)
                            }
                            7 => {
                              let e63 = {
                                let l45 = i32::from(*((base + 8) as *const u8));
                                
                                match l45 {
                                  0 => {
                                    let e = {
                                      let l46 = *((base + 12) as *const i32);
                                      
                                      l46
                                    };
                                    Ok(e)
                                  }
                                  1 => {
                                    let e = {
                                      let l47 = *((base + 12) as *const i32);
                                      
                                      l47
                                    };
                                    Err(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                }
                              };
                              WitNode::ResultValue(e63)
                            }
                            8 => {
                              let e63 = {
                                let l48 = i32::from(*((base + 8) as *const u8));
                                
                                l48 as u8
                              };
                              WitNode::PrimU8(e63)
                            }
                            9 => {
                              let e63 = {
                                let l49 = i32::from(*((base + 8) as *const u16));
                                
                                l49 as u16
                              };
                              WitNode::PrimU16(e63)
                            }
                            10 => {
                              let e63 = {
                                let l50 = *((base + 8) as *const i32);
                                
                                l50 as u32
                              };
                              WitNode::PrimU32(e63)
                            }
                            11 => {
                              let e63 = {
                                let l51 = *((base + 8) as *const i64);
                                
                                l51 as u64
                              };
                              WitNode::PrimU64(e63)
                            }
                            12 => {
                              let e63 = {
                                let l52 = i32::from(*((base + 8) as *const i8));
                                
                                l52 as i8
                              };
                              WitNode::PrimS8(e63)
                            }
                            13 => {
                              let e63 = {
                                let l53 = i32::from(*((base + 8) as *const i16));
                                
                                l53 as i16
                              };
                              WitNode::PrimS16(e63)
                            }
                            14 => {
                              let e63 = {
                                let l54 = *((base + 8) as *const i32);
                                
                                l54
                              };
                              WitNode::PrimS32(e63)
                            }
                            15 => {
                              let e63 = {
                                let l55 = *((base + 8) as *const i64);
                                
                                l55
                              };
                              WitNode::PrimS64(e63)
                            }
                            16 => {
                              let e63 = {
                                let l56 = *((base + 8) as *const f32);
                                
                                l56
                              };
                              WitNode::PrimFloat32(e63)
                            }
                            17 => {
                              let e63 = {
                                let l57 = *((base + 8) as *const f64);
                                
                                l57
                              };
                              WitNode::PrimFloat64(e63)
                            }
                            18 => {
                              let e63 = {
                                let l58 = *((base + 8) as *const i32);
                                
                                wit_bindgen::rt::char_lift(l58 as u32)
                              };
                              WitNode::PrimChar(e63)
                            }
                            19 => {
                              let e63 = {
                                let l59 = i32::from(*((base + 8) as *const u8));
                                
                                wit_bindgen::rt::bool_lift(l59 as u8)
                              };
                              WitNode::PrimBool(e63)
                            }
                            n => {
                              debug_assert_eq!(n, 20, "invalid enum discriminant");
                              let e63 = {
                                let l60 = *((base + 8) as *const i32);
                                let l61 = *((base + 12) as *const i32);
                                let len62 = l61 as usize;
                                let bytes62 = Vec::from_raw_parts(l60 as *mut _, len62, len62);
                                
                                wit_bindgen::rt::string_lift(bytes62)
                              };
                              WitNode::PrimString(e63)
                            }
                          };
                          
                          v63
                        };
                        result64.push(e64);
                      }
                      wit_bindgen::rt::dealloc(base64, (len64 as usize) * 24, 8);
                      
                      WitValue{
                        nodes: result64,
                      }
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = ();
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          
        }
        
      }
    }
    
    #[cfg(target_arch = "wasm32")]
    #[link_section = "component-type:wit-value"]
    #[doc(hidden)]
    pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1483] = [3, 0, 9, 119, 105, 116, 45, 118, 97, 108, 117, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 140, 5, 1, 65, 2, 1, 66, 26, 1, 111, 2, 115, 122, 1, 112, 0, 1, 112, 127, 1, 112, 122, 1, 107, 122, 1, 106, 1, 122, 1, 122, 1, 113, 21, 12, 114, 101, 99, 111, 114, 100, 45, 118, 97, 108, 117, 101, 1, 1, 0, 13, 118, 97, 114, 105, 97, 110, 116, 45, 118, 97, 108, 117, 101, 1, 0, 0, 10, 101, 110, 117, 109, 45, 118, 97, 108, 117, 101, 1, 115, 0, 11, 102, 108, 97, 103, 115, 45, 118, 97, 108, 117, 101, 1, 2, 0, 11, 116, 117, 112, 108, 101, 45, 118, 97, 108, 117, 101, 1, 3, 0, 10, 108, 105, 115, 116, 45, 118, 97, 108, 117, 101, 1, 3, 0, 12, 111, 112, 116, 105, 111, 110, 45, 118, 97, 108, 117, 101, 1, 4, 0, 12, 114, 101, 115, 117, 108, 116, 45, 118, 97, 108, 117, 101, 1, 5, 0, 7, 112, 114, 105, 109, 45, 117, 56, 1, 125, 0, 8, 112, 114, 105, 109, 45, 117, 49, 54, 1, 123, 0, 8, 112, 114, 105, 109, 45, 117, 51, 50, 1, 121, 0, 8, 112, 114, 105, 109, 45, 117, 54, 52, 1, 119, 0, 7, 112, 114, 105, 109, 45, 115, 56, 1, 126, 0, 8, 112, 114, 105, 109, 45, 115, 49, 54, 1, 124, 0, 8, 112, 114, 105, 109, 45, 115, 51, 50, 1, 122, 0, 8, 112, 114, 105, 109, 45, 115, 54, 52, 1, 120, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 51, 50, 1, 118, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 54, 52, 1, 117, 0, 9, 112, 114, 105, 109, 45, 99, 104, 97, 114, 1, 116, 0, 9, 112, 114, 105, 109, 45, 98, 111, 111, 108, 1, 127, 0, 11, 112, 114, 105, 109, 45, 115, 116, 114, 105, 110, 103, 1, 115, 0, 4, 0, 8, 119, 105, 116, 45, 110, 111, 100, 101, 3, 0, 6, 1, 112, 7, 1, 114, 1, 5, 110, 111, 100, 101, 115, 8, 4, 0, 9, 119, 105, 116, 45, 118, 97, 108, 117, 101, 3, 0, 9, 1, 114, 1, 5, 118, 97, 108, 117, 101, 115, 4, 0, 3, 117, 114, 105, 3, 0, 11, 4, 0, 8, 119, 97, 115, 109, 45, 114, 112, 99, 3, 1, 1, 105, 13, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 12, 0, 14, 4, 0, 21, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 119, 97, 115, 109, 45, 114, 112, 99, 1, 15, 1, 104, 13, 1, 112, 115, 1, 106, 1, 115, 0, 1, 64, 3, 4, 115, 101, 108, 102, 16, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 15, 102, 117, 110, 99, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 17, 0, 18, 4, 0, 38, 91, 109, 101, 116, 104, 111, 100, 93, 119, 97, 115, 109, 45, 114, 112, 99, 46, 105, 110, 118, 111, 107, 101, 45, 97, 110, 100, 45, 97, 119, 97, 105, 116, 45, 106, 115, 111, 110, 1, 19, 1, 112, 10, 1, 106, 1, 10, 0, 1, 64, 3, 4, 115, 101, 108, 102, 16, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 15, 102, 117, 110, 99, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 20, 0, 21, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 119, 97, 115, 109, 45, 114, 112, 99, 46, 105, 110, 118, 111, 107, 101, 45, 97, 110, 100, 45, 97, 119, 97, 105, 116, 1, 22, 4, 1, 21, 103, 111, 108, 101, 109, 58, 114, 112, 99, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 11, 11, 1, 0, 5, 116, 121, 112, 101, 115, 3, 0, 0, 7, 173, 5, 1, 65, 2, 1, 65, 2, 1, 66, 26, 1, 111, 2, 115, 122, 1, 112, 0, 1, 112, 127, 1, 112, 122, 1, 107, 122, 1, 106, 1, 122, 1, 122, 1, 113, 21, 12, 114, 101, 99, 111, 114, 100, 45, 118, 97, 108, 117, 101, 1, 1, 0, 13, 118, 97, 114, 105, 97, 110, 116, 45, 118, 97, 108, 117, 101, 1, 0, 0, 10, 101, 110, 117, 109, 45, 118, 97, 108, 117, 101, 1, 115, 0, 11, 102, 108, 97, 103, 115, 45, 118, 97, 108, 117, 101, 1, 2, 0, 11, 116, 117, 112, 108, 101, 45, 118, 97, 108, 117, 101, 1, 3, 0, 10, 108, 105, 115, 116, 45, 118, 97, 108, 117, 101, 1, 3, 0, 12, 111, 112, 116, 105, 111, 110, 45, 118, 97, 108, 117, 101, 1, 4, 0, 12, 114, 101, 115, 117, 108, 116, 45, 118, 97, 108, 117, 101, 1, 5, 0, 7, 112, 114, 105, 109, 45, 117, 56, 1, 125, 0, 8, 112, 114, 105, 109, 45, 117, 49, 54, 1, 123, 0, 8, 112, 114, 105, 109, 45, 117, 51, 50, 1, 121, 0, 8, 112, 114, 105, 109, 45, 117, 54, 52, 1, 119, 0, 7, 112, 114, 105, 109, 45, 115, 56, 1, 126, 0, 8, 112, 114, 105, 109, 45, 115, 49, 54, 1, 124, 0, 8, 112, 114, 105, 109, 45, 115, 51, 50, 1, 122, 0, 8, 112, 114, 105, 109, 45, 115, 54, 52, 1, 120, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 51, 50, 1, 118, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 54, 52, 1, 117, 0, 9, 112, 114, 105, 109, 45, 99, 104, 97, 114, 1, 116, 0, 9, 112, 114, 105, 109, 45, 98, 111, 111, 108, 1, 127, 0, 11, 112, 114, 105, 109, 45, 115, 116, 114, 105, 110, 103, 1, 115, 0, 4, 0, 8, 119, 105, 116, 45, 110, 111, 100, 101, 3, 0, 6, 1, 112, 7, 1, 114, 1, 5, 110, 111, 100, 101, 115, 8, 4, 0, 9, 119, 105, 116, 45, 118, 97, 108, 117, 101, 3, 0, 9, 1, 114, 1, 5, 118, 97, 108, 117, 101, 115, 4, 0, 3, 117, 114, 105, 3, 0, 11, 4, 0, 8, 119, 97, 115, 109, 45, 114, 112, 99, 3, 1, 1, 105, 13, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 12, 0, 14, 4, 0, 21, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 119, 97, 115, 109, 45, 114, 112, 99, 1, 15, 1, 104, 13, 1, 112, 115, 1, 106, 1, 115, 0, 1, 64, 3, 4, 115, 101, 108, 102, 16, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 15, 102, 117, 110, 99, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 17, 0, 18, 4, 0, 38, 91, 109, 101, 116, 104, 111, 100, 93, 119, 97, 115, 109, 45, 114, 112, 99, 46, 105, 110, 118, 111, 107, 101, 45, 97, 110, 100, 45, 97, 119, 97, 105, 116, 45, 106, 115, 111, 110, 1, 19, 1, 112, 10, 1, 106, 1, 10, 0, 1, 64, 3, 4, 115, 101, 108, 102, 16, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 15, 102, 117, 110, 99, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 20, 0, 21, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 119, 97, 115, 109, 45, 114, 112, 99, 46, 105, 110, 118, 111, 107, 101, 45, 97, 110, 100, 45, 97, 119, 97, 105, 116, 1, 22, 3, 1, 21, 103, 111, 108, 101, 109, 58, 114, 112, 99, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 4, 1, 25, 103, 111, 108, 101, 109, 58, 114, 112, 99, 47, 119, 105, 116, 45, 118, 97, 108, 117, 101, 64, 48, 46, 49, 46, 48, 4, 0, 11, 15, 1, 0, 9, 119, 105, 116, 45, 118, 97, 108, 117, 101, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];
    
    #[inline(never)]
    #[doc(hidden)]
    #[cfg(target_arch = "wasm32")]
    pub fn __link_section() {}
    